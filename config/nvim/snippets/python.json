{
  "Pwntools Snippet": {
    "prefix": "pwn",
    "body": [
      "# Time     ${CURRENT_YEAR}-${CURRENT_MONTH}-${CURRENT_DATE} ${CURRENT_HOUR}:${CURRENT_MINUTE}:${CURRENT_SECOND}",
      "",
      "from pwn import *",
      "",
      "class Exploit:",
      "    def __init__(self, chal_path, libc_path, nc_url):",
      "        self.chal_path = chal_path",
      "        self.libc_path = libc_path",
      "        self.nc_url = nc_url",
      "",
      "        libc = ELF(self.libc_path) if self.libc_path else None",
      "        self.libc = libc",
      "        env = {\"LD_PRELOAD\": self.libc_path} if self.libc_path else None",
      "        if args.REMOTE:",
      "            nc_url = self.nc_url.split()",
      "            self.p = remote(nc_url[1], int(nc_url[2]))",
      "        elif args.DEBUGG:",
      "            context.terminal = [\"tmux\", \"splitw\", \"-h\"]",
      "            self.p = process(self.chal_path, env=env)",
      "            gdbscript = \"\"\"",
      "",
      "            \"\"\"",
      "            gdb.attach(self.p, gdbscript=gdbscript)",
      "        else:",
      "            self.p = process(self.chal_path, env=env)",
      "",
      "sla = lambda x, y : p.sendlineafter(x, y)",
      "sa  = lambda x, y : p.sendafter(x, y)",
      "sl  = lambda x    : p.sendline(x)",
      "s   = lambda x    : p.send(x)",
      "rvu = lambda x    : p.recvuntil(x)",
      "rv  = lambda x    : p.recv(x)",
      "rvl = lambda      : p.recvline()",
      "li  = lambda x    : log.info(hex(x))",
      "",
      "if __name__ == \"__main__\":",
      "    context(os='linux', arch='amd64', log_level='debug')",
      "    chal_path = \"$1\"",
      "    libc_path = \"\"",
      "    nc_url = \"\"",
      "    exp = Exploit(chal_path, libc_path, nc_url)",
      "    p = exp.p",
      "",
      "    p.interactive()"
    ],
    "description": "Pwntools Snippet"
  },
  "LOS Snippet": {
    "prefix": "los",
    "body": [
      "# Time     ${CURRENT_YEAR}-${CURRENT_MONTH}-${CURRENT_DATE} ${CURRENT_HOUR}:${CURRENT_MINUTE}:${CURRENT_SECOND}",
      "",
      "from login import get_session, result",
      "",
      "url, s = get_session(\"$1\")",
      "",
      "data = {",
      "}",
      "a = s.get(url, params=data)",
      "",
      "result(a)"
    ],
    "description": "LOS Snippet"
  },
  "Misc Snippet": {
    "prefix": "misc",
    "body": [
      "# Time     ${CURRENT_YEAR}-${CURRENT_MONTH}-${CURRENT_DATE} ${CURRENT_HOUR}:${CURRENT_MINUTE}:${CURRENT_SECOND}",
      "",
      "from pwn import *",
      "",
      "class Exploit:",
      "    def __init__(self, chal_path, nc_url):",
      "        self.chal_path = chal_path",
      "        self.nc_url = nc_url",
      "",
      "        if args.REMOTE:",
      "            nc_url = self.nc_url.split()",
      "            self.p = remote(nc_url[1], int(nc_url[2]))",
      "        else:",
      "            self.p = process(self.chal_path)",
      "",
      "sla = lambda x, y : p.sendlineafter(x, y)",
      "sa  = lambda x, y : p.sendafter(x, y)",
      "sl  = lambda x    : p.sendline(x)",
      "s   = lambda x    : p.send(x)",
      "rvu = lambda x    : p.recvuntil(x)",
      "rv  = lambda x    : p.recv(x)",
      "rvl = lambda      : p.recvline()",
      "li  = lambda x    : log.info(hex(x))",
      "",
      "if __name__ == \"__main__\":",
      "    context(os='linux', arch='amd64', log_level='debug')",
      "    chal_path = \"$1\"",
      "    nc_url = \"$2\"",
      "    exp = Exploit(chal_path, nc_url)",
      "    p = exp.p",
      "",
      "    p.interactive()"
    ],
    "description": "Misc Snippet"
  }
}
